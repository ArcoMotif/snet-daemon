// Code generated by protoc-gen-go. DO NOT EDIT.
// source: heartbeat.proto

package grpc_health_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HeartbeatMsg_ServingStatus int32

const (
	HeartbeatMsg_UNKNOWN     HeartbeatMsg_ServingStatus = 0
	HeartbeatMsg_SERVING     HeartbeatMsg_ServingStatus = 1
	HeartbeatMsg_NOT_SERVING HeartbeatMsg_ServingStatus = 2
)

var HeartbeatMsg_ServingStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "SERVING",
	2: "NOT_SERVING",
}
var HeartbeatMsg_ServingStatus_value = map[string]int32{
	"UNKNOWN":     0,
	"SERVING":     1,
	"NOT_SERVING": 2,
}

func (x HeartbeatMsg_ServingStatus) String() string {
	return proto.EnumName(HeartbeatMsg_ServingStatus_name, int32(x))
}
func (HeartbeatMsg_ServingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_heartbeat_6f1f81da63ac3778, []int{0, 0}
}

// proto spec for the heartbeat
type HeartbeatMsg struct {
	ServiceName          string                     `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	Status               HeartbeatMsg_ServingStatus `protobuf:"varint,2,opt,name=status,proto3,enum=grpc.health.v1.HeartbeatMsg_ServingStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *HeartbeatMsg) Reset()         { *m = HeartbeatMsg{} }
func (m *HeartbeatMsg) String() string { return proto.CompactTextString(m) }
func (*HeartbeatMsg) ProtoMessage()    {}
func (*HeartbeatMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_heartbeat_6f1f81da63ac3778, []int{0}
}
func (m *HeartbeatMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatMsg.Unmarshal(m, b)
}
func (m *HeartbeatMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatMsg.Marshal(b, m, deterministic)
}
func (dst *HeartbeatMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatMsg.Merge(dst, src)
}
func (m *HeartbeatMsg) XXX_Size() int {
	return xxx_messageInfo_HeartbeatMsg.Size(m)
}
func (m *HeartbeatMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatMsg.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatMsg proto.InternalMessageInfo

func (m *HeartbeatMsg) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *HeartbeatMsg) GetStatus() HeartbeatMsg_ServingStatus {
	if m != nil {
		return m.Status
	}
	return HeartbeatMsg_UNKNOWN
}

// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs.
type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_heartbeat_6f1f81da63ac3778, []int{1}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*HeartbeatMsg)(nil), "grpc.health.v1.HeartbeatMsg")
	proto.RegisterType((*Empty)(nil), "grpc.health.v1.Empty")
	proto.RegisterEnum("grpc.health.v1.HeartbeatMsg_ServingStatus", HeartbeatMsg_ServingStatus_name, HeartbeatMsg_ServingStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HeartbeatClient is the client API for Heartbeat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HeartbeatClient interface {
	Check(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HeartbeatMsg, error)
}

type heartbeatClient struct {
	cc *grpc.ClientConn
}

func NewHeartbeatClient(cc *grpc.ClientConn) HeartbeatClient {
	return &heartbeatClient{cc}
}

func (c *heartbeatClient) Check(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HeartbeatMsg, error) {
	out := new(HeartbeatMsg)
	err := c.cc.Invoke(ctx, "/grpc.health.v1.Heartbeat/check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeartbeatServer is the server API for Heartbeat service.
type HeartbeatServer interface {
	Check(context.Context, *Empty) (*HeartbeatMsg, error)
}

func RegisterHeartbeatServer(s *grpc.Server, srv HeartbeatServer) {
	s.RegisterService(&_Heartbeat_serviceDesc, srv)
}

func _Heartbeat_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeatServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.health.v1.Heartbeat/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeatServer).Check(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Heartbeat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.health.v1.Heartbeat",
	HandlerType: (*HeartbeatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "check",
			Handler:    _Heartbeat_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heartbeat.proto",
}

func init() { proto.RegisterFile("heartbeat.proto", fileDescriptor_heartbeat_6f1f81da63ac3778) }

var fileDescriptor_heartbeat_6f1f81da63ac3778 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x48, 0x4d, 0x2c,
	0x2a, 0x49, 0x4a, 0x4d, 0x2c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4b, 0x2f, 0x2a,
	0x48, 0xd6, 0xcb, 0x48, 0x4d, 0xcc, 0x29, 0xc9, 0xd0, 0x2b, 0x33, 0x54, 0xda, 0xc0, 0xc8, 0xc5,
	0xe3, 0x01, 0x53, 0xe3, 0x5b, 0x9c, 0x2e, 0xa4, 0xc0, 0xc5, 0x5d, 0x9c, 0x5a, 0x54, 0x96, 0x99,
	0x9c, 0xea, 0x97, 0x98, 0x9b, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x84, 0x2c, 0x24, 0xe4,
	0xc4, 0xc5, 0x56, 0x5c, 0x92, 0x58, 0x52, 0x5a, 0x2c, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x67, 0xa4,
	0xa5, 0x87, 0x6a, 0xa6, 0x1e, 0xb2, 0x79, 0x7a, 0xc1, 0x20, 0x9d, 0x79, 0xe9, 0xc1, 0x60, 0x1d,
	0x41, 0x50, 0x9d, 0x4a, 0x56, 0x5c, 0xbc, 0x28, 0x12, 0x42, 0xdc, 0x5c, 0xec, 0xa1, 0x7e, 0xde,
	0x7e, 0xfe, 0xe1, 0x7e, 0x02, 0x0c, 0x20, 0x4e, 0xb0, 0x6b, 0x50, 0x98, 0xa7, 0x9f, 0xbb, 0x00,
	0xa3, 0x10, 0x3f, 0x17, 0xb7, 0x9f, 0x7f, 0x48, 0x3c, 0x4c, 0x80, 0x49, 0x89, 0x9d, 0x8b, 0xd5,
	0x35, 0xb7, 0xa0, 0xa4, 0xd2, 0xc8, 0x9b, 0x8b, 0x13, 0x6e, 0x95, 0x90, 0x1d, 0x17, 0x6b, 0x72,
	0x46, 0x6a, 0x72, 0xb6, 0x90, 0x28, 0xba, 0x73, 0xc0, 0x8a, 0xa5, 0x64, 0xf0, 0xb9, 0x52, 0x89,
	0x21, 0x89, 0x0d, 0x1c, 0x3e, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x04, 0x0c, 0x01, 0xd6,
	0x32, 0x01, 0x00, 0x00,
}
