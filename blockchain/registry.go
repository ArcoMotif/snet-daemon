// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package blockchain

import (
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// RegistryABI is the input ABI used to generate the binding from.
const RegistryABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orgName\",\"type\":\"bytes32\"}],\"name\":\"OrganizationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orgName\",\"type\":\"bytes32\"}],\"name\":\"OrganizationModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orgName\",\"type\":\"bytes32\"}],\"name\":\"OrganizationDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orgName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"serviceName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"metadataURI\",\"type\":\"bytes\"}],\"name\":\"ServiceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orgName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"serviceName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"metadataURI\",\"type\":\"bytes\"}],\"name\":\"ServiceMetadataModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orgName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"serviceName\",\"type\":\"bytes32\"}],\"name\":\"ServiceTagsModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orgName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"serviceName\",\"type\":\"bytes32\"}],\"name\":\"ServiceDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orgName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"typeRepositoryName\",\"type\":\"bytes32\"}],\"name\":\"TypeRepositoryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orgName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"typeRepositoryName\",\"type\":\"bytes32\"}],\"name\":\"TypeRepositoryModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orgName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"typeRepositoryName\",\"type\":\"bytes32\"}],\"name\":\"TypeRepositoryDeleted\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"},{\"name\":\"members\",\"type\":\"address[]\"}],\"name\":\"createOrganization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOrganizationOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"},{\"name\":\"newMembers\",\"type\":\"address[]\"}],\"name\":\"addOrganizationMembers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"},{\"name\":\"existingMembers\",\"type\":\"address[]\"}],\"name\":\"removeOrganizationMembers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"}],\"name\":\"deleteOrganization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"},{\"name\":\"serviceName\",\"type\":\"bytes32\"},{\"name\":\"metadataURI\",\"type\":\"bytes\"},{\"name\":\"tags\",\"type\":\"bytes32[]\"}],\"name\":\"createServiceRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"},{\"name\":\"serviceName\",\"type\":\"bytes32\"},{\"name\":\"metadataURI\",\"type\":\"bytes\"}],\"name\":\"updateServiceRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"},{\"name\":\"serviceName\",\"type\":\"bytes32\"},{\"name\":\"tags\",\"type\":\"bytes32[]\"}],\"name\":\"addTagsToServiceRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"},{\"name\":\"serviceName\",\"type\":\"bytes32\"},{\"name\":\"tags\",\"type\":\"bytes32[]\"}],\"name\":\"removeTagsFromServiceRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"},{\"name\":\"serviceName\",\"type\":\"bytes32\"}],\"name\":\"deleteServiceRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"},{\"name\":\"repositoryName\",\"type\":\"bytes32\"},{\"name\":\"repositoryURI\",\"type\":\"bytes\"},{\"name\":\"tags\",\"type\":\"bytes32[]\"}],\"name\":\"createTypeRepositoryRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"},{\"name\":\"repositoryName\",\"type\":\"bytes32\"},{\"name\":\"repositoryURI\",\"type\":\"bytes\"}],\"name\":\"updateTypeRepositoryRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"},{\"name\":\"repositoryName\",\"type\":\"bytes32\"},{\"name\":\"tags\",\"type\":\"bytes32[]\"}],\"name\":\"addTagsToTypeRepositoryRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"},{\"name\":\"repositoryName\",\"type\":\"bytes32\"},{\"name\":\"tags\",\"type\":\"bytes32[]\"}],\"name\":\"removeTagsFromTypeRepositoryRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"},{\"name\":\"repositoryName\",\"type\":\"bytes32\"}],\"name\":\"deleteTypeRepositoryRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listOrganizations\",\"outputs\":[{\"name\":\"orgNames\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"}],\"name\":\"getOrganizationByName\",\"outputs\":[{\"name\":\"found\",\"type\":\"bool\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"members\",\"type\":\"address[]\"},{\"name\":\"serviceNames\",\"type\":\"bytes32[]\"},{\"name\":\"repositoryNames\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"}],\"name\":\"listServicesForOrganization\",\"outputs\":[{\"name\":\"found\",\"type\":\"bool\"},{\"name\":\"serviceNames\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"},{\"name\":\"serviceName\",\"type\":\"bytes32\"}],\"name\":\"getServiceRegistrationByName\",\"outputs\":[{\"name\":\"found\",\"type\":\"bool\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"metadataURI\",\"type\":\"bytes\"},{\"name\":\"tags\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"}],\"name\":\"listTypeRepositoriesForOrganization\",\"outputs\":[{\"name\":\"found\",\"type\":\"bool\"},{\"name\":\"repositoryNames\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orgName\",\"type\":\"bytes32\"},{\"name\":\"repositoryName\",\"type\":\"bytes32\"}],\"name\":\"getTypeRepositoryByName\",\"outputs\":[{\"name\":\"found\",\"type\":\"bool\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"repositoryURI\",\"type\":\"bytes\"},{\"name\":\"tags\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listServiceTags\",\"outputs\":[{\"name\":\"tags\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tag\",\"type\":\"bytes32\"}],\"name\":\"listServicesForTag\",\"outputs\":[{\"name\":\"orgNames\",\"type\":\"bytes32[]\"},{\"name\":\"serviceNames\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listTypeRepositoryTags\",\"outputs\":[{\"name\":\"tags\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tag\",\"type\":\"bytes32\"}],\"name\":\"listTypeRepositoriesForTag\",\"outputs\":[{\"name\":\"orgNames\",\"type\":\"bytes32[]\"},{\"name\":\"repositoryNames\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// RegistryBin is the compiled bytecode used for deploying new contracts.
const RegistryBin = `0x608060405234801561001057600080fd5b506131ce806100206000396000f3006080604052600436106101535763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663013be2e0811461015857806301ffc9a714610182578063080b6ad7146101cd5780632cd49849146101f5578063340d84e51461031e5780633a2cb860146103835780633d408ac0146103fa578063520e855b146104e25780636928848d146104f7578063692c8a921461050f578063781d69d2146105c05780637f9d9c77146105e45780638e07e977146106185780639aad8d9d14610640578063acd298d31461065b578063afab986c14610673578063b72516551461069b578063bb82354f146106b0578063bcb43444146106c8578063ca62968a146106f0578063ca97758c14610718578063cb78728214610733578063d2e544f714610767578063d9219d281461078b578063e443852d146107af578063e5ae53e2146107d3575b600080fd5b34801561016457600080fd5b50610180600480359060248035916044359182019101356107ee565b005b34801561018e57600080fd5b506101b97bffffffffffffffffffffffffffffffffffffffffffffffffffffffff196004351661087b565b604080519115158252519081900360200190f35b3480156101d957600080fd5b506101806004803590602480359160443591820191013561090e565b34801561020157600080fd5b5061020d60043561098d565b6040518087151515158152602001866000191660001916815260200185600160a060020a0316600160a060020a03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561028557818101518382015260200161026d565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156102c45781810151838201526020016102ac565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156103035781810151838201526020016102eb565b50505050905001995050505050505050505060405180910390f35b34801561032a57600080fd5b50610333610b0b565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561036f578181015183820152602001610357565b505050509050019250505060405180910390f35b34801561038f57600080fd5b5061039b600435610b65565b604051808315151515815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156103e55781810151838201526020016103cd565b50505050905001935050505060405180910390f35b34801561040657600080fd5b50610415600435602435610bee565b604080518515158152602080820186905260809282018381528551938301939093528451919291606084019160a08501919087019080838360005b83811015610468578181015183820152602001610450565b50505050905090810190601f1680156104955780820380516001836020036101000a031916815260200191505b508381038252845181528451602091820191808701910280838360005b838110156104ca5781810151838201526020016104b2565b50505050905001965050505050505060405180910390f35b3480156104ee57600080fd5b50610333610d67565b34801561050357600080fd5b50610180600435610dbe565b34801561051b57600080fd5b5061052760043561102e565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561056b578181015183820152602001610553565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105aa578181015183820152602001610592565b5050505090500194505050505060405180910390f35b3480156105cc57600080fd5b506101806004803590602480359081019101356110fb565b3480156105f057600080fd5b5061018060048035906024803591604435808301929082013591606435918201910135611268565b34801561062457600080fd5b50610180600480359060248035916044359182019101356113eb565b34801561064c57600080fd5b50610180600435602435611434565b34801561066757600080fd5b50610527600435611491565b34801561067f57600080fd5b506101806004803590602480359160443591820191013561155e565b3480156106a757600080fd5b506103336115eb565b3480156106bc57600080fd5b5061039b600435611642565b3480156106d457600080fd5b50610180600480359060248035916044359182019101356116c8565b3480156106fc57600080fd5b506101806004803590602480359160443591820191013561176d565b34801561072457600080fd5b506101806004356024356117c6565b34801561073f57600080fd5b5061018060048035906024803591604435808301929082013591606435918201910135611823565b34801561077357600080fd5b50610180600480359060248035908101910135611973565b34801561079757600080fd5b506101806004803590602480359081019101356119f5565b3480156107bb57600080fd5b50610180600435600160a060020a0360243516611a72565b3480156107df57600080fd5b50610415600435602435611adf565b60006107fb856001611c52565b610806856001611d2a565b61081285856001611dcb565b5060005b818110156108475761083f858585858581811061082f57fe5b9050602002013560001916611ec0565b600101610816565b604051849086907fd8b715d9bf49bca034a993b5b934475414e84c904dcbf90dbddd139808b97b0590600090a35050505050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f01ffc9a700000000000000000000000000000000000000000000000000000000148061090857507f256b3545000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198316145b92915050565b610919846001611c52565b610924846001611d2a565b610930848460016121bb565b600084815260016020818152604080842087855260070190915290912061095991018383612e9e565b50604051839085907fea3bcbabd0c9d3dae0474b21e6aeef5b2598eafe710788a0da66a15ffb65f44990600090a350505050565b600081815260016020526040812054819081906060908190819015156109b65760009550610b02565b60008781526001602081815260409283902080548184015460029092018054865181860281018601909752808752949b50909950600160a060020a0390911697509190830182828015610a3257602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610a14575b50505060008a81526001602090815260409182902060040180548351818402810184019094528084529598509194919350909150830182828015610a9657602002820191906000526020600020905b81548152600190910190602001808311610a81575b50505060008a81526001602090815260409182902060050180548351818402810184019094528084529597509194919350909150830182828015610afa57602002820191906000526020600020905b81548152600190910190602001808311610ae5575b505050505090505b91939550919395565b60606000805480602002602001604051908101604052809291908181526020018280548015610b5a57602002820191906000526020600020905b81548152600190910190602001808311610b45575b505050505090505b90565b6000818152600160205260408120546060901515610b865760009150610be9565b60008381526001602081815260409283902060040180548451818402810184019095528085529295509190830182828015610be157602002820191906000526020600020905b81548152600190910190602001808311610bcc575b505050505090505b915091565b600082815260016020526040812054819060609081901515610c135760009350610d5e565b60008681526001602090815260408083208884526006019091529020541515610c3f5760009350610d5e565b6000868152600160208181526040808420898552600601825292839020805490830180548551600260001983881615610100020190921691909104601f8101859004850282018501909652858152939850909650919290830182828015610ce75780601f10610cbc57610100808354040283529160200191610ce7565b820191906000526020600020905b815481529060010190602001808311610cca57829003601f168201915b50505060008981526001602090815260408083208b845260060182529182902060020180548351818402810184019094528084529597509194919350909150830182828015610d5657602002820191906000526020600020905b81548152600190910190602001808311610d41575b505050505090505b92959194509250565b60606003805480602002602001604051908101604052809291908181526020018280548015610b5a576020028201919060005260206000209081548152600190910190602001808311610b45575050505050905090565b6000806000806000610dd1866001611c52565b610ddc866000611d2a565b60008681526001602052604090206004015494505b6000851115610e3d5760008681526001602052604090206004018054610e319188916000198901908110610e2157fe5b90600052602060002001546122a6565b60001990940193610df1565b60008681526001602052604090206005015493505b6000841115610e9e5760008681526001602052604090206005018054610e929188916000198801908110610e8257fe5b9060005260206000200154612463565b60001990930192610e52565b60008681526001602052604090206002015492505b6000831115610f095760008681526001602052604090206002018054610efd9188916000198701908110610ee357fe5b600091825260209091200154600160a060020a0316612600565b60001990920191610eb3565b60008681526001602052604081206008015481549093506000198101908110610f2e57fe5b6000918252602082200154815490925082919084908110610f4b57fe5b60009182526020909120015414610f905780600083815481101515610f6c57fe5b60009182526020808320909101929092558281526001909152604090206008018290555b6000805490610fa3906000198301612f1c565b50600086815260016020819052604082208281559081018054600160a060020a031916905590610fd66002830182612f40565b610fe4600483016000612f40565b610ff2600583016000612f40565b50600060089190910181905560405187917fb1dbc279d80967cb8113073651e5919753c82fad7b002581eb7a020eaf89e9a791a2505050505050565b600081815260056020908152604091829020600101805483518184028101840190945280845260609384939092919083018282801561108d57602002820191906000526020600020905b81548152600190910190602001808311611078575b50505060008681526005602090815260409182902060020180548351818402810184019094528084529597509194919350909150830182828015610be1576020028201919060005260206000209081548152600190910190602001808311610bcc5750505050509050915091565b611103612f61565b61110e846000611c52565b60008481526001602081815260409283902084518155848201519281018054600160a060020a031916600160a060020a03909416939093179092559183015180518493611162926002850192910190612fa4565b506060820151805161117e916004840191602090910190613005565b506080820151805161119a916005840191602090910190613005565b5060a0919091015160089182015560008581526001602081815260408084208981558084018054600160a060020a031916331790558454950185905591840183559180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563909201869055815184820281810183019093528481526112379287928791879182919085019084908082843750612782945050505050565b60405184907f0e7857bfbd020070a2c8d2fe38c788de1e6adc88cb46f60cf6ec7cd385e81db190600090a250505050565b611270613042565b600061127d886001611c52565b611288886001611d2a565b61129488886000611dcb565b868252604080516020601f880181900481028201810190925286815290879087908190840183828082843750505050602080860193845260008c815260018083526040808320600481015460608b01528e8452600601845290912087518155945180518896955061130b945091850192019061306e565b5060408201518051611327916002840191602090910190613005565b50606091909101516004918201556000898152600160208181526040832090930180549182018155825291812090910188905590505b8281101561138e57611386888886868581811061137657fe5b9050602002013560001916612895565b60010161135d565b604080516020808252810187905288918a917f3229c7118d95880b1bb8abc6231f47f1a63d7b1e7e22fbd91a8ccffc9fa75df9918a918a918190810184848082843760405192018290039550909350505050a35050505050505050565b60006113f8856001611c52565b611403856001611d2a565b61140f85856001611dcb565b5060005b818110156108475761142c858585858581811061137657fe5b600101611413565b61143f826001611c52565b61144a826001611d2a565b611456828260016121bb565b6114608282612463565b604051819083907f6ede3bb1e53daa5c72ee70092a3ce9a7dadac03f980fe8726ad2716c7f871d5490600090a35050565b60008181526004602090815260409182902060010180548351818402810184019094528084526060938493909291908301828280156114f057602002820191906000526020600020905b815481526001909101906020018083116114db575b50505060008681526004602090815260409182902060020180548351818402810184019094528084529597509194919350909150830182828015610be1576020028201919060005260206000209081548152600190910190602001808311610bcc5750505050509050915091565b600061156b856001611c52565b611576856001611d2a565b611582858560016121bb565b5060005b818110156115b7576115af858585858581811061159f57fe5b9050602002013560001916612a1f565b600101611586565b604051849086907fea3bcbabd0c9d3dae0474b21e6aeef5b2598eafe710788a0da66a15ffb65f44990600090a35050505050565b60606002805480602002602001604051908101604052809291908181526020018280548015610b5a576020028201919060005260206000209081548152600190910190602001808311610b45575050505050905090565b60008181526001602052604081205460609015156116635760009150610be9565b60008381526001602081815260409283902060050180548451818402810184019095528085529295509190830182828015610be1576020028201919060005260206000209081548152600190910190602001808311610bcc5750505050509050915091565b6116d3846001611c52565b6116de846001611d2a565b6116ea84846001611dcb565b600084815260016020818152604080842087855260060190915290912061171391018383612e9e565b506040805160208082528101839052849186917fb7b13a2b2a9c0147b27815cbec2c7e5ed10588c9d5812211619614c379174c5a91869186918190810184848082843760405192018290039550909350505050a350505050565b600061177a856001611c52565b611785856001611d2a565b611791858560016121bb565b5060005b818110156115b7576117be85858585858181106117ae57fe5b9050602002013560001916612ba4565b600101611795565b6117d1826001611c52565b6117dc826001611d2a565b6117e882826001611dcb565b6117f282826122a6565b604051819083907f3caed2ddcd24bae20b0075a02d974ba3a229dace98271af93ce8c8f3ebd9d27290600090a35050565b61182b613042565b6000611838886001611c52565b611843886001611d2a565b61184f888860006121bb565b60008881526001602081815260408084208b8552600701825290922084518155828501518051869492936118889390850192019061306e565b50604082015180516118a4916002840191602090910190613005565b506060919091015160049091015560008881526001602081815260408084208b85526007019091529091208881556118de91018787612e9e565b505060008781526001602081815260408084206005810180548c875260079092018452918520600401819055838352928301815583528220018790555b8281101561193c57611934888886868581811061159f57fe5b60010161191b565b604051879089907f5124da9b6fa39b72e36fd353b25ddc71861b18c5dcafea15e97a850a1696adbc90600090a35050505050505050565b6000611980846001611c52565b61198b846001611d2a565b5060005b818110156119c4576119bc848484848181106119a757fe5b90506020020135600160a060020a0316612600565b60010161198f565b60405184907f06ccb920be65231f5c9d04dd4883d3c7648ebe5f5317cc7177ee4f4a7cc2d03890600090a250505050565b611a00836001611c52565b611a0b836001611d2a565b611a428383838080602002602001604051908101604052809392919081815260200183836020028082843750612782945050505050565b60405183907f06ccb920be65231f5c9d04dd4883d3c7648ebe5f5317cc7177ee4f4a7cc2d03890600090a2505050565b611a7d826001611c52565b611a88826000611d2a565b60008281526001602081905260408083209091018054600160a060020a031916600160a060020a0385161790555183917f06ccb920be65231f5c9d04dd4883d3c7648ebe5f5317cc7177ee4f4a7cc2d03891a25050565b600082815260016020526040812054819060609081901515611b045760009350610d5e565b60008681526001602090815260408083208884526007019091529020541515611b305760009350610d5e565b6000868152600160208181526040808420898552600701825292839020820180548451601f6002610100848816150260001901909316929092049182018490048402810184019095528085529297508896509190830182828015611bd55780601f10611baa57610100808354040283529160200191611bd5565b820191906000526020600020905b815481529060010190602001808311611bb857829003601f168201915b50505060008981526001602090815260408083208b845260070182529182902060020180548351818402810184019094528084529597509194919350909150830182828015610d56576020028201919060005260206000209081548152600190910190602001808311610d41575050505050905092959194509250565b8015611cc2576000828152600160205260409020541515611cbd576040805160e560020a62461bcd02815260206004820152601260248201527f6f726720646f6573206e6f742065786973740000000000000000000000000000604482015290519081900360640190fd5b611d26565b60008281526001602052604090205415611d26576040805160e560020a62461bcd02815260206004820152601260248201527f6f726720616c7265616479206578697374730000000000000000000000000000604482015290519081900360640190fd5b5050565b60008281526001602081905260409091200154600160a060020a0316331480611d755750808015611d7557506000828152600160209081526040808320338452600301909152812054115b1515611d26576040805160e560020a62461bcd02815260206004820152601760248201527f756e617574686f72697a656420696e766f636174696f6e000000000000000000604482015290519081900360640190fd5b8015611e495760008381526001602090815260408083208584526006019091529020541515611e44576040805160e560020a62461bcd02815260206004820152601660248201527f7365727669636520646f6573206e6f7420657869737400000000000000000000604482015290519081900360640190fd5b611ebb565b600083815260016020908152604080832085845260060190915290205415611ebb576040805160e560020a62461bcd02815260206004820152601660248201527f7365727669636520616c72656164792065786973747300000000000000000000604482015290519081900360640190fd5b505050565b600083815260016020908152604080832085845260060182528083208484526003019091528120548190819081908190156121b15760008881526001602081815260408084208b85526006018083528185208b865260038101845291852090930154938b90529190526002018054919650906000198101908110611f4057fe5b60009182526020808320909101548a83526001825260408084208b8552600601909252912060020154909450600019018514611fde5760008881526001602090815260408083208a84526006019091529020600201805485919087908110611fa457fe5b6000918252602080832090910192909255898152600180835260408083208b84526006018452808320888452600301909352919020018590555b60008881526001602090815260408083208a8452600601909152902060020180549061200e906000198301612f1c565b5060008881526001602081815260408084208b855260060182528084208a85526003018252808420600201546004909252909220015490955060001901925082851461213657600086815260046020526040902060010180548490811061207157fe5b6000918252602080832090910154888352600490915260409091206002018054919350908490811061209f57fe5b60009182526020808320909101548883526004909152604090912060010180549192508391879081106120ce57fe5b60009182526020808320909101929092558781526004909152604090206002018054829190879081106120fd57fe5b60009182526020808320909101929092558381526001825260408082208483526006018352808220898352600301909252206002018590555b6000868152600460205260409020600101805490612158906000198301612f1c565b50600086815260046020526040902060020180549061217b906000198301612f1c565b5060008881526001602081815260408084208b855260060182528084208a85526003019091528220828155908101829055600201555b5050505050505050565b80156122345760008381526001602090815260408083208584526007019091529020541515611e44576040805160e560020a62461bcd02815260206004820152601860248201527f74797065207265706f20646f6573206e6f742065786973740000000000000000604482015290519081900360640190fd5b600083815260016020908152604080832085845260070190915290205415611ebb576040805160e560020a62461bcd02815260206004820152601860248201527f74797065207265706f20616c7265616479206578697374730000000000000000604482015290519081900360640190fd5b600082815260016020908152604080832084845260060190915281206002015490805b60008311156123265760008581526001602090815260408083208784526006019091529020600201805461231a918791879190600019880190811061230a57fe5b9060005260206000200154611ec0565b600019909201916122c9565b6000858152600160208181526040808420888552600681018352908420600490810154948a90529290915201805491935090600019810190811061236657fe5b600091825260208083209091015487835260019091526040909120600401805491925082918490811061239557fe5b600091825260209091200154146123f45760008581526001602052604090206004018054829190849081106123c657fe5b6000918252602080832090910192909255868152600182526040808220848352600601909252206004018290555b6000858152600160205260409020600401805490612416906000198301612f1c565b50600085815260016020818152604080842088855260060190915282208281559190612444908301826130dc565b612452600283016000612f40565b600482016000905550505050505050565b600082815260016020908152604080832084845260070190915281206002015490805b60008311156124e3576000858152600160209081526040808320878452600701909152902060020180546124d791879187919060001988019081106124c757fe5b9060005260206000200154612ba4565b60001990920191612486565b60008581526001602081815260408084208885526007810183529084206004015493899052919052600501805491935090600019810190811061252257fe5b600091825260208083209091015487835260019091526040909120600501805491925082918490811061255157fe5b600091825260209091200154146125b057600085815260016020526040902060050180548291908490811061258257fe5b6000918252602080832090910192909255868152600182526040808220848352600701909252206004018290555b60008581526001602052604090206005018054906125d2906000198301612f1c565b50600085815260016020818152604080842088855260070190915282208281559190612444908301826130dc565b6000828152600160209081526040808320600160a060020a038516845260030190915281205481901561277c576000848152600160208181526040808420600160a060020a03881685526003810183529084205493889052919052600201805491935090600019810190811061267257fe5b6000918252602080832090910154868352600190915260409091206002018054600160a060020a039092169250829160001985019081106126af57fe5b600091825260209091200154600160a060020a031614612732576000848152600160205260409020600201805482919060001985019081106126ed57fe5b60009182526020808320919091018054600160a060020a031916600160a060020a03948516179055868252600181526040808320938516835260039093019052208290555b6000848152600160205260409020600201805490612754906000198301612f1c565b506000848152600160209081526040808320600160a060020a03871684526003019091528120555b50505050565b60005b8151811015611ebb5760008381526001602052604081208351600390910191908490849081106127b157fe5b90602001906020020151600160a060020a0316600160a060020a03168152602001908152602001600020546000141561288d576000838152600160205260409020825160029091019083908390811061280657fe5b60209081029190910181015182546001808201855560009485528385209091018054600160a060020a031916600160a060020a03909316929092179091558583529052604081206002810154845190926003909201919085908590811061286957fe5b6020908102909101810151600160a060020a03168252810191909152604001600020555b600101612785565b61289d613120565b6128a5613140565b600085815260016020908152604080832087845260060182528083208684526003019091529020541515612a18576000858152600160208181526040808420888552600601825280842087855260038101835281852087840151818601908155888401516002808401918255928b90559190920180549092556004845291852080850154909255805493840181558452908320909101859055908490525460ff1615156129dd57600180825260008481526004602090815260409091208351815460ff191690151517815581840151805185949293612988938501920190613005565b50604082015180516129a4916002840191602090910190613005565b5050600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01849055505b600083815260046020908152604082206001808201805480830182559085528385200189905560029091018054918201815583529120018490555b5050505050565b612a27613120565b612a2f613140565b600085815260016020908152604080832087845260070182528083208684526003019091529020541515612a18576000858152600160208181526040808420888552600701825280842087855260038101835281852087840151818601908155888401516002808401918255928b90559190920180549092556005845291852080850154909255805493840181558452908320909101859055908490525460ff161515612b6757600180825260008481526005602090815260409091208351815460ff191690151517815581840151805185949293612b12938501920190613005565b5060408201518051612b2e916002840191602090910190613005565b5050600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01849055505b5050600090815260056020908152604082206001808201805480830182559085528385200195909555600201805494850181558252902090910155565b600083815260016020908152604080832085845260070182528083208484526003019091528120548190819081908190156121b15760008881526001602081815260408084208b85526007018083528185208b865260038101845291852090930154938b90529190526002018054919650906000198101908110612c2457fe5b60009182526020808320909101548a83526001825260408084208b8552600701909252912060020154909450600019018514612cc25760008881526001602090815260408083208a84526007019091529020600201805485919087908110612c8857fe5b6000918252602080832090910192909255898152600180835260408083208b84526007018452808320888452600301909352919020018590555b60008881526001602090815260408083208a84526007019091529020600201805490612cf2906000198301612f1c565b5060008881526001602081815260408084208b855260070182528084208a855260030182528084206002015460059092529092200154909550600019019250828514612e1a576000868152600560205260409020600101805484908110612d5557fe5b60009182526020808320909101548883526005909152604090912060020180549193509084908110612d8357fe5b6000918252602080832090910154888352600590915260409091206001018054919250839187908110612db257fe5b6000918252602080832090910192909255878152600590915260409020600201805482919087908110612de157fe5b60009182526020808320909101929092558381526001825260408082208483526007018352808220898352600301909252206002018590555b6000868152600560205260409020600101805490612e3c906000198301612f1c565b506000868152600560205260409020600201805490612e5f906000198301612f1c565b5060008881526001602081815260408084208b855260070182528084208a85526003019091528220828155908101829055600201555050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612edf5782800160ff19823516178555612f0c565b82800160010185558215612f0c579182015b82811115612f0c578235825591602001919060010190612ef1565b50612f18929150613164565b5090565b815481835581811115611ebb57600083815260209020611ebb918101908301613164565b5080546000825590600052602060002090810190612f5e9190613164565b50565b60c060405190810160405280600080191681526020016000600160a060020a03168152602001606081526020016060815260200160608152602001600081525090565b828054828255906000526020600020908101928215612ff9579160200282015b82811115612ff95782518254600160a060020a031916600160a060020a03909116178255602090920191600190910190612fc4565b50612f1892915061317e565b828054828255906000526020600020908101928215612f0c579160200282015b82811115612f0c5782518255602090920191600190910190613025565b608060405190810160405280600080191681526020016060815260200160608152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106130af57805160ff1916838001178555612f0c565b82800160010185558215612f0c579182015b82811115612f0c5782518255916020019190600101906130c1565b50805460018160011615610100020316600290046000825580601f106131025750612f5e565b601f016020900490600052602060002090810190612f5e9190613164565b604080516060810182526000808252602082018190529181019190915290565b60606040519081016040528060001515815260200160608152602001606081525090565b610b6291905b80821115612f18576000815560010161316a565b610b6291905b80821115612f18578054600160a060020a03191681556001016131845600a165627a7a723058205e58958aaea04b27828c30a8119a6bb5b0bfd0b096c1ad414f918ac3960574630029`

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// GetOrganizationByName is a free data retrieval call binding the contract method 0x2cd49849.
//
// Solidity: function getOrganizationByName(orgName bytes32) constant returns(found bool, name bytes32, owner address, members address[], serviceNames bytes32[], repositoryNames bytes32[])
func (_Registry *RegistryCaller) GetOrganizationByName(opts *bind.CallOpts, orgName [32]byte) (struct {
	Found           bool
	Name            [32]byte
	Owner           common.Address
	Members         []common.Address
	ServiceNames    [][32]byte
	RepositoryNames [][32]byte
}, error) {
	ret := new(struct {
		Found           bool
		Name            [32]byte
		Owner           common.Address
		Members         []common.Address
		ServiceNames    [][32]byte
		RepositoryNames [][32]byte
	})
	out := ret
	err := _Registry.contract.Call(opts, out, "getOrganizationByName", orgName)
	return *ret, err
}

// GetOrganizationByName is a free data retrieval call binding the contract method 0x2cd49849.
//
// Solidity: function getOrganizationByName(orgName bytes32) constant returns(found bool, name bytes32, owner address, members address[], serviceNames bytes32[], repositoryNames bytes32[])
func (_Registry *RegistrySession) GetOrganizationByName(orgName [32]byte) (struct {
	Found           bool
	Name            [32]byte
	Owner           common.Address
	Members         []common.Address
	ServiceNames    [][32]byte
	RepositoryNames [][32]byte
}, error) {
	return _Registry.Contract.GetOrganizationByName(&_Registry.CallOpts, orgName)
}

// GetOrganizationByName is a free data retrieval call binding the contract method 0x2cd49849.
//
// Solidity: function getOrganizationByName(orgName bytes32) constant returns(found bool, name bytes32, owner address, members address[], serviceNames bytes32[], repositoryNames bytes32[])
func (_Registry *RegistryCallerSession) GetOrganizationByName(orgName [32]byte) (struct {
	Found           bool
	Name            [32]byte
	Owner           common.Address
	Members         []common.Address
	ServiceNames    [][32]byte
	RepositoryNames [][32]byte
}, error) {
	return _Registry.Contract.GetOrganizationByName(&_Registry.CallOpts, orgName)
}

// GetServiceRegistrationByName is a free data retrieval call binding the contract method 0x3d408ac0.
//
// Solidity: function getServiceRegistrationByName(orgName bytes32, serviceName bytes32) constant returns(found bool, name bytes32, metadataURI bytes, tags bytes32[])
func (_Registry *RegistryCaller) GetServiceRegistrationByName(opts *bind.CallOpts, orgName [32]byte, serviceName [32]byte) (struct {
	Found       bool
	Name        [32]byte
	MetadataURI []byte
	Tags        [][32]byte
}, error) {
	ret := new(struct {
		Found       bool
		Name        [32]byte
		MetadataURI []byte
		Tags        [][32]byte
	})
	out := ret
	err := _Registry.contract.Call(opts, out, "getServiceRegistrationByName", orgName, serviceName)
	return *ret, err
}

// GetServiceRegistrationByName is a free data retrieval call binding the contract method 0x3d408ac0.
//
// Solidity: function getServiceRegistrationByName(orgName bytes32, serviceName bytes32) constant returns(found bool, name bytes32, metadataURI bytes, tags bytes32[])
func (_Registry *RegistrySession) GetServiceRegistrationByName(orgName [32]byte, serviceName [32]byte) (struct {
	Found       bool
	Name        [32]byte
	MetadataURI []byte
	Tags        [][32]byte
}, error) {
	return _Registry.Contract.GetServiceRegistrationByName(&_Registry.CallOpts, orgName, serviceName)
}

// GetServiceRegistrationByName is a free data retrieval call binding the contract method 0x3d408ac0.
//
// Solidity: function getServiceRegistrationByName(orgName bytes32, serviceName bytes32) constant returns(found bool, name bytes32, metadataURI bytes, tags bytes32[])
func (_Registry *RegistryCallerSession) GetServiceRegistrationByName(orgName [32]byte, serviceName [32]byte) (struct {
	Found       bool
	Name        [32]byte
	MetadataURI []byte
	Tags        [][32]byte
}, error) {
	return _Registry.Contract.GetServiceRegistrationByName(&_Registry.CallOpts, orgName, serviceName)
}

// GetTypeRepositoryByName is a free data retrieval call binding the contract method 0xe5ae53e2.
//
// Solidity: function getTypeRepositoryByName(orgName bytes32, repositoryName bytes32) constant returns(found bool, name bytes32, repositoryURI bytes, tags bytes32[])
func (_Registry *RegistryCaller) GetTypeRepositoryByName(opts *bind.CallOpts, orgName [32]byte, repositoryName [32]byte) (struct {
	Found         bool
	Name          [32]byte
	RepositoryURI []byte
	Tags          [][32]byte
}, error) {
	ret := new(struct {
		Found         bool
		Name          [32]byte
		RepositoryURI []byte
		Tags          [][32]byte
	})
	out := ret
	err := _Registry.contract.Call(opts, out, "getTypeRepositoryByName", orgName, repositoryName)
	return *ret, err
}

// GetTypeRepositoryByName is a free data retrieval call binding the contract method 0xe5ae53e2.
//
// Solidity: function getTypeRepositoryByName(orgName bytes32, repositoryName bytes32) constant returns(found bool, name bytes32, repositoryURI bytes, tags bytes32[])
func (_Registry *RegistrySession) GetTypeRepositoryByName(orgName [32]byte, repositoryName [32]byte) (struct {
	Found         bool
	Name          [32]byte
	RepositoryURI []byte
	Tags          [][32]byte
}, error) {
	return _Registry.Contract.GetTypeRepositoryByName(&_Registry.CallOpts, orgName, repositoryName)
}

// GetTypeRepositoryByName is a free data retrieval call binding the contract method 0xe5ae53e2.
//
// Solidity: function getTypeRepositoryByName(orgName bytes32, repositoryName bytes32) constant returns(found bool, name bytes32, repositoryURI bytes, tags bytes32[])
func (_Registry *RegistryCallerSession) GetTypeRepositoryByName(orgName [32]byte, repositoryName [32]byte) (struct {
	Found         bool
	Name          [32]byte
	RepositoryURI []byte
	Tags          [][32]byte
}, error) {
	return _Registry.Contract.GetTypeRepositoryByName(&_Registry.CallOpts, orgName, repositoryName)
}

// ListOrganizations is a free data retrieval call binding the contract method 0x340d84e5.
//
// Solidity: function listOrganizations() constant returns(orgNames bytes32[])
func (_Registry *RegistryCaller) ListOrganizations(opts *bind.CallOpts) ([][32]byte, error) {
	var (
		ret0 = new([][32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "listOrganizations")
	return *ret0, err
}

// ListOrganizations is a free data retrieval call binding the contract method 0x340d84e5.
//
// Solidity: function listOrganizations() constant returns(orgNames bytes32[])
func (_Registry *RegistrySession) ListOrganizations() ([][32]byte, error) {
	return _Registry.Contract.ListOrganizations(&_Registry.CallOpts)
}

// ListOrganizations is a free data retrieval call binding the contract method 0x340d84e5.
//
// Solidity: function listOrganizations() constant returns(orgNames bytes32[])
func (_Registry *RegistryCallerSession) ListOrganizations() ([][32]byte, error) {
	return _Registry.Contract.ListOrganizations(&_Registry.CallOpts)
}

// ListServiceTags is a free data retrieval call binding the contract method 0xb7251655.
//
// Solidity: function listServiceTags() constant returns(tags bytes32[])
func (_Registry *RegistryCaller) ListServiceTags(opts *bind.CallOpts) ([][32]byte, error) {
	var (
		ret0 = new([][32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "listServiceTags")
	return *ret0, err
}

// ListServiceTags is a free data retrieval call binding the contract method 0xb7251655.
//
// Solidity: function listServiceTags() constant returns(tags bytes32[])
func (_Registry *RegistrySession) ListServiceTags() ([][32]byte, error) {
	return _Registry.Contract.ListServiceTags(&_Registry.CallOpts)
}

// ListServiceTags is a free data retrieval call binding the contract method 0xb7251655.
//
// Solidity: function listServiceTags() constant returns(tags bytes32[])
func (_Registry *RegistryCallerSession) ListServiceTags() ([][32]byte, error) {
	return _Registry.Contract.ListServiceTags(&_Registry.CallOpts)
}

// ListServicesForOrganization is a free data retrieval call binding the contract method 0x3a2cb860.
//
// Solidity: function listServicesForOrganization(orgName bytes32) constant returns(found bool, serviceNames bytes32[])
func (_Registry *RegistryCaller) ListServicesForOrganization(opts *bind.CallOpts, orgName [32]byte) (struct {
	Found        bool
	ServiceNames [][32]byte
}, error) {
	ret := new(struct {
		Found        bool
		ServiceNames [][32]byte
	})
	out := ret
	err := _Registry.contract.Call(opts, out, "listServicesForOrganization", orgName)
	return *ret, err
}

// ListServicesForOrganization is a free data retrieval call binding the contract method 0x3a2cb860.
//
// Solidity: function listServicesForOrganization(orgName bytes32) constant returns(found bool, serviceNames bytes32[])
func (_Registry *RegistrySession) ListServicesForOrganization(orgName [32]byte) (struct {
	Found        bool
	ServiceNames [][32]byte
}, error) {
	return _Registry.Contract.ListServicesForOrganization(&_Registry.CallOpts, orgName)
}

// ListServicesForOrganization is a free data retrieval call binding the contract method 0x3a2cb860.
//
// Solidity: function listServicesForOrganization(orgName bytes32) constant returns(found bool, serviceNames bytes32[])
func (_Registry *RegistryCallerSession) ListServicesForOrganization(orgName [32]byte) (struct {
	Found        bool
	ServiceNames [][32]byte
}, error) {
	return _Registry.Contract.ListServicesForOrganization(&_Registry.CallOpts, orgName)
}

// ListServicesForTag is a free data retrieval call binding the contract method 0xacd298d3.
//
// Solidity: function listServicesForTag(tag bytes32) constant returns(orgNames bytes32[], serviceNames bytes32[])
func (_Registry *RegistryCaller) ListServicesForTag(opts *bind.CallOpts, tag [32]byte) (struct {
	OrgNames     [][32]byte
	ServiceNames [][32]byte
}, error) {
	ret := new(struct {
		OrgNames     [][32]byte
		ServiceNames [][32]byte
	})
	out := ret
	err := _Registry.contract.Call(opts, out, "listServicesForTag", tag)
	return *ret, err
}

// ListServicesForTag is a free data retrieval call binding the contract method 0xacd298d3.
//
// Solidity: function listServicesForTag(tag bytes32) constant returns(orgNames bytes32[], serviceNames bytes32[])
func (_Registry *RegistrySession) ListServicesForTag(tag [32]byte) (struct {
	OrgNames     [][32]byte
	ServiceNames [][32]byte
}, error) {
	return _Registry.Contract.ListServicesForTag(&_Registry.CallOpts, tag)
}

// ListServicesForTag is a free data retrieval call binding the contract method 0xacd298d3.
//
// Solidity: function listServicesForTag(tag bytes32) constant returns(orgNames bytes32[], serviceNames bytes32[])
func (_Registry *RegistryCallerSession) ListServicesForTag(tag [32]byte) (struct {
	OrgNames     [][32]byte
	ServiceNames [][32]byte
}, error) {
	return _Registry.Contract.ListServicesForTag(&_Registry.CallOpts, tag)
}

// ListTypeRepositoriesForOrganization is a free data retrieval call binding the contract method 0xbb82354f.
//
// Solidity: function listTypeRepositoriesForOrganization(orgName bytes32) constant returns(found bool, repositoryNames bytes32[])
func (_Registry *RegistryCaller) ListTypeRepositoriesForOrganization(opts *bind.CallOpts, orgName [32]byte) (struct {
	Found           bool
	RepositoryNames [][32]byte
}, error) {
	ret := new(struct {
		Found           bool
		RepositoryNames [][32]byte
	})
	out := ret
	err := _Registry.contract.Call(opts, out, "listTypeRepositoriesForOrganization", orgName)
	return *ret, err
}

// ListTypeRepositoriesForOrganization is a free data retrieval call binding the contract method 0xbb82354f.
//
// Solidity: function listTypeRepositoriesForOrganization(orgName bytes32) constant returns(found bool, repositoryNames bytes32[])
func (_Registry *RegistrySession) ListTypeRepositoriesForOrganization(orgName [32]byte) (struct {
	Found           bool
	RepositoryNames [][32]byte
}, error) {
	return _Registry.Contract.ListTypeRepositoriesForOrganization(&_Registry.CallOpts, orgName)
}

// ListTypeRepositoriesForOrganization is a free data retrieval call binding the contract method 0xbb82354f.
//
// Solidity: function listTypeRepositoriesForOrganization(orgName bytes32) constant returns(found bool, repositoryNames bytes32[])
func (_Registry *RegistryCallerSession) ListTypeRepositoriesForOrganization(orgName [32]byte) (struct {
	Found           bool
	RepositoryNames [][32]byte
}, error) {
	return _Registry.Contract.ListTypeRepositoriesForOrganization(&_Registry.CallOpts, orgName)
}

// ListTypeRepositoriesForTag is a free data retrieval call binding the contract method 0x692c8a92.
//
// Solidity: function listTypeRepositoriesForTag(tag bytes32) constant returns(orgNames bytes32[], repositoryNames bytes32[])
func (_Registry *RegistryCaller) ListTypeRepositoriesForTag(opts *bind.CallOpts, tag [32]byte) (struct {
	OrgNames        [][32]byte
	RepositoryNames [][32]byte
}, error) {
	ret := new(struct {
		OrgNames        [][32]byte
		RepositoryNames [][32]byte
	})
	out := ret
	err := _Registry.contract.Call(opts, out, "listTypeRepositoriesForTag", tag)
	return *ret, err
}

// ListTypeRepositoriesForTag is a free data retrieval call binding the contract method 0x692c8a92.
//
// Solidity: function listTypeRepositoriesForTag(tag bytes32) constant returns(orgNames bytes32[], repositoryNames bytes32[])
func (_Registry *RegistrySession) ListTypeRepositoriesForTag(tag [32]byte) (struct {
	OrgNames        [][32]byte
	RepositoryNames [][32]byte
}, error) {
	return _Registry.Contract.ListTypeRepositoriesForTag(&_Registry.CallOpts, tag)
}

// ListTypeRepositoriesForTag is a free data retrieval call binding the contract method 0x692c8a92.
//
// Solidity: function listTypeRepositoriesForTag(tag bytes32) constant returns(orgNames bytes32[], repositoryNames bytes32[])
func (_Registry *RegistryCallerSession) ListTypeRepositoriesForTag(tag [32]byte) (struct {
	OrgNames        [][32]byte
	RepositoryNames [][32]byte
}, error) {
	return _Registry.Contract.ListTypeRepositoriesForTag(&_Registry.CallOpts, tag)
}

// ListTypeRepositoryTags is a free data retrieval call binding the contract method 0x520e855b.
//
// Solidity: function listTypeRepositoryTags() constant returns(tags bytes32[])
func (_Registry *RegistryCaller) ListTypeRepositoryTags(opts *bind.CallOpts) ([][32]byte, error) {
	var (
		ret0 = new([][32]byte)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "listTypeRepositoryTags")
	return *ret0, err
}

// ListTypeRepositoryTags is a free data retrieval call binding the contract method 0x520e855b.
//
// Solidity: function listTypeRepositoryTags() constant returns(tags bytes32[])
func (_Registry *RegistrySession) ListTypeRepositoryTags() ([][32]byte, error) {
	return _Registry.Contract.ListTypeRepositoryTags(&_Registry.CallOpts)
}

// ListTypeRepositoryTags is a free data retrieval call binding the contract method 0x520e855b.
//
// Solidity: function listTypeRepositoryTags() constant returns(tags bytes32[])
func (_Registry *RegistryCallerSession) ListTypeRepositoryTags() ([][32]byte, error) {
	return _Registry.Contract.ListTypeRepositoryTags(&_Registry.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(interfaceID bytes4) constant returns(bool)
func (_Registry *RegistryCaller) SupportsInterface(opts *bind.CallOpts, interfaceID [4]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "supportsInterface", interfaceID)
	return *ret0, err
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(interfaceID bytes4) constant returns(bool)
func (_Registry *RegistrySession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _Registry.Contract.SupportsInterface(&_Registry.CallOpts, interfaceID)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(interfaceID bytes4) constant returns(bool)
func (_Registry *RegistryCallerSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _Registry.Contract.SupportsInterface(&_Registry.CallOpts, interfaceID)
}

// AddOrganizationMembers is a paid mutator transaction binding the contract method 0xd9219d28.
//
// Solidity: function addOrganizationMembers(orgName bytes32, newMembers address[]) returns()
func (_Registry *RegistryTransactor) AddOrganizationMembers(opts *bind.TransactOpts, orgName [32]byte, newMembers []common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "addOrganizationMembers", orgName, newMembers)
}

// AddOrganizationMembers is a paid mutator transaction binding the contract method 0xd9219d28.
//
// Solidity: function addOrganizationMembers(orgName bytes32, newMembers address[]) returns()
func (_Registry *RegistrySession) AddOrganizationMembers(orgName [32]byte, newMembers []common.Address) (*types.Transaction, error) {
	return _Registry.Contract.AddOrganizationMembers(&_Registry.TransactOpts, orgName, newMembers)
}

// AddOrganizationMembers is a paid mutator transaction binding the contract method 0xd9219d28.
//
// Solidity: function addOrganizationMembers(orgName bytes32, newMembers address[]) returns()
func (_Registry *RegistryTransactorSession) AddOrganizationMembers(orgName [32]byte, newMembers []common.Address) (*types.Transaction, error) {
	return _Registry.Contract.AddOrganizationMembers(&_Registry.TransactOpts, orgName, newMembers)
}

// AddTagsToServiceRegistration is a paid mutator transaction binding the contract method 0x8e07e977.
//
// Solidity: function addTagsToServiceRegistration(orgName bytes32, serviceName bytes32, tags bytes32[]) returns()
func (_Registry *RegistryTransactor) AddTagsToServiceRegistration(opts *bind.TransactOpts, orgName [32]byte, serviceName [32]byte, tags [][32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "addTagsToServiceRegistration", orgName, serviceName, tags)
}

// AddTagsToServiceRegistration is a paid mutator transaction binding the contract method 0x8e07e977.
//
// Solidity: function addTagsToServiceRegistration(orgName bytes32, serviceName bytes32, tags bytes32[]) returns()
func (_Registry *RegistrySession) AddTagsToServiceRegistration(orgName [32]byte, serviceName [32]byte, tags [][32]byte) (*types.Transaction, error) {
	return _Registry.Contract.AddTagsToServiceRegistration(&_Registry.TransactOpts, orgName, serviceName, tags)
}

// AddTagsToServiceRegistration is a paid mutator transaction binding the contract method 0x8e07e977.
//
// Solidity: function addTagsToServiceRegistration(orgName bytes32, serviceName bytes32, tags bytes32[]) returns()
func (_Registry *RegistryTransactorSession) AddTagsToServiceRegistration(orgName [32]byte, serviceName [32]byte, tags [][32]byte) (*types.Transaction, error) {
	return _Registry.Contract.AddTagsToServiceRegistration(&_Registry.TransactOpts, orgName, serviceName, tags)
}

// AddTagsToTypeRepositoryRegistration is a paid mutator transaction binding the contract method 0xafab986c.
//
// Solidity: function addTagsToTypeRepositoryRegistration(orgName bytes32, repositoryName bytes32, tags bytes32[]) returns()
func (_Registry *RegistryTransactor) AddTagsToTypeRepositoryRegistration(opts *bind.TransactOpts, orgName [32]byte, repositoryName [32]byte, tags [][32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "addTagsToTypeRepositoryRegistration", orgName, repositoryName, tags)
}

// AddTagsToTypeRepositoryRegistration is a paid mutator transaction binding the contract method 0xafab986c.
//
// Solidity: function addTagsToTypeRepositoryRegistration(orgName bytes32, repositoryName bytes32, tags bytes32[]) returns()
func (_Registry *RegistrySession) AddTagsToTypeRepositoryRegistration(orgName [32]byte, repositoryName [32]byte, tags [][32]byte) (*types.Transaction, error) {
	return _Registry.Contract.AddTagsToTypeRepositoryRegistration(&_Registry.TransactOpts, orgName, repositoryName, tags)
}

// AddTagsToTypeRepositoryRegistration is a paid mutator transaction binding the contract method 0xafab986c.
//
// Solidity: function addTagsToTypeRepositoryRegistration(orgName bytes32, repositoryName bytes32, tags bytes32[]) returns()
func (_Registry *RegistryTransactorSession) AddTagsToTypeRepositoryRegistration(orgName [32]byte, repositoryName [32]byte, tags [][32]byte) (*types.Transaction, error) {
	return _Registry.Contract.AddTagsToTypeRepositoryRegistration(&_Registry.TransactOpts, orgName, repositoryName, tags)
}

// ChangeOrganizationOwner is a paid mutator transaction binding the contract method 0xe443852d.
//
// Solidity: function changeOrganizationOwner(orgName bytes32, newOwner address) returns()
func (_Registry *RegistryTransactor) ChangeOrganizationOwner(opts *bind.TransactOpts, orgName [32]byte, newOwner common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "changeOrganizationOwner", orgName, newOwner)
}

// ChangeOrganizationOwner is a paid mutator transaction binding the contract method 0xe443852d.
//
// Solidity: function changeOrganizationOwner(orgName bytes32, newOwner address) returns()
func (_Registry *RegistrySession) ChangeOrganizationOwner(orgName [32]byte, newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.ChangeOrganizationOwner(&_Registry.TransactOpts, orgName, newOwner)
}

// ChangeOrganizationOwner is a paid mutator transaction binding the contract method 0xe443852d.
//
// Solidity: function changeOrganizationOwner(orgName bytes32, newOwner address) returns()
func (_Registry *RegistryTransactorSession) ChangeOrganizationOwner(orgName [32]byte, newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.ChangeOrganizationOwner(&_Registry.TransactOpts, orgName, newOwner)
}

// CreateOrganization is a paid mutator transaction binding the contract method 0x781d69d2.
//
// Solidity: function createOrganization(orgName bytes32, members address[]) returns()
func (_Registry *RegistryTransactor) CreateOrganization(opts *bind.TransactOpts, orgName [32]byte, members []common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "createOrganization", orgName, members)
}

// CreateOrganization is a paid mutator transaction binding the contract method 0x781d69d2.
//
// Solidity: function createOrganization(orgName bytes32, members address[]) returns()
func (_Registry *RegistrySession) CreateOrganization(orgName [32]byte, members []common.Address) (*types.Transaction, error) {
	return _Registry.Contract.CreateOrganization(&_Registry.TransactOpts, orgName, members)
}

// CreateOrganization is a paid mutator transaction binding the contract method 0x781d69d2.
//
// Solidity: function createOrganization(orgName bytes32, members address[]) returns()
func (_Registry *RegistryTransactorSession) CreateOrganization(orgName [32]byte, members []common.Address) (*types.Transaction, error) {
	return _Registry.Contract.CreateOrganization(&_Registry.TransactOpts, orgName, members)
}

// CreateServiceRegistration is a paid mutator transaction binding the contract method 0x7f9d9c77.
//
// Solidity: function createServiceRegistration(orgName bytes32, serviceName bytes32, metadataURI bytes, tags bytes32[]) returns()
func (_Registry *RegistryTransactor) CreateServiceRegistration(opts *bind.TransactOpts, orgName [32]byte, serviceName [32]byte, metadataURI []byte, tags [][32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "createServiceRegistration", orgName, serviceName, metadataURI, tags)
}

// CreateServiceRegistration is a paid mutator transaction binding the contract method 0x7f9d9c77.
//
// Solidity: function createServiceRegistration(orgName bytes32, serviceName bytes32, metadataURI bytes, tags bytes32[]) returns()
func (_Registry *RegistrySession) CreateServiceRegistration(orgName [32]byte, serviceName [32]byte, metadataURI []byte, tags [][32]byte) (*types.Transaction, error) {
	return _Registry.Contract.CreateServiceRegistration(&_Registry.TransactOpts, orgName, serviceName, metadataURI, tags)
}

// CreateServiceRegistration is a paid mutator transaction binding the contract method 0x7f9d9c77.
//
// Solidity: function createServiceRegistration(orgName bytes32, serviceName bytes32, metadataURI bytes, tags bytes32[]) returns()
func (_Registry *RegistryTransactorSession) CreateServiceRegistration(orgName [32]byte, serviceName [32]byte, metadataURI []byte, tags [][32]byte) (*types.Transaction, error) {
	return _Registry.Contract.CreateServiceRegistration(&_Registry.TransactOpts, orgName, serviceName, metadataURI, tags)
}

// CreateTypeRepositoryRegistration is a paid mutator transaction binding the contract method 0xcb787282.
//
// Solidity: function createTypeRepositoryRegistration(orgName bytes32, repositoryName bytes32, repositoryURI bytes, tags bytes32[]) returns()
func (_Registry *RegistryTransactor) CreateTypeRepositoryRegistration(opts *bind.TransactOpts, orgName [32]byte, repositoryName [32]byte, repositoryURI []byte, tags [][32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "createTypeRepositoryRegistration", orgName, repositoryName, repositoryURI, tags)
}

// CreateTypeRepositoryRegistration is a paid mutator transaction binding the contract method 0xcb787282.
//
// Solidity: function createTypeRepositoryRegistration(orgName bytes32, repositoryName bytes32, repositoryURI bytes, tags bytes32[]) returns()
func (_Registry *RegistrySession) CreateTypeRepositoryRegistration(orgName [32]byte, repositoryName [32]byte, repositoryURI []byte, tags [][32]byte) (*types.Transaction, error) {
	return _Registry.Contract.CreateTypeRepositoryRegistration(&_Registry.TransactOpts, orgName, repositoryName, repositoryURI, tags)
}

// CreateTypeRepositoryRegistration is a paid mutator transaction binding the contract method 0xcb787282.
//
// Solidity: function createTypeRepositoryRegistration(orgName bytes32, repositoryName bytes32, repositoryURI bytes, tags bytes32[]) returns()
func (_Registry *RegistryTransactorSession) CreateTypeRepositoryRegistration(orgName [32]byte, repositoryName [32]byte, repositoryURI []byte, tags [][32]byte) (*types.Transaction, error) {
	return _Registry.Contract.CreateTypeRepositoryRegistration(&_Registry.TransactOpts, orgName, repositoryName, repositoryURI, tags)
}

// DeleteOrganization is a paid mutator transaction binding the contract method 0x6928848d.
//
// Solidity: function deleteOrganization(orgName bytes32) returns()
func (_Registry *RegistryTransactor) DeleteOrganization(opts *bind.TransactOpts, orgName [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "deleteOrganization", orgName)
}

// DeleteOrganization is a paid mutator transaction binding the contract method 0x6928848d.
//
// Solidity: function deleteOrganization(orgName bytes32) returns()
func (_Registry *RegistrySession) DeleteOrganization(orgName [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.DeleteOrganization(&_Registry.TransactOpts, orgName)
}

// DeleteOrganization is a paid mutator transaction binding the contract method 0x6928848d.
//
// Solidity: function deleteOrganization(orgName bytes32) returns()
func (_Registry *RegistryTransactorSession) DeleteOrganization(orgName [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.DeleteOrganization(&_Registry.TransactOpts, orgName)
}

// DeleteServiceRegistration is a paid mutator transaction binding the contract method 0xca97758c.
//
// Solidity: function deleteServiceRegistration(orgName bytes32, serviceName bytes32) returns()
func (_Registry *RegistryTransactor) DeleteServiceRegistration(opts *bind.TransactOpts, orgName [32]byte, serviceName [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "deleteServiceRegistration", orgName, serviceName)
}

// DeleteServiceRegistration is a paid mutator transaction binding the contract method 0xca97758c.
//
// Solidity: function deleteServiceRegistration(orgName bytes32, serviceName bytes32) returns()
func (_Registry *RegistrySession) DeleteServiceRegistration(orgName [32]byte, serviceName [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.DeleteServiceRegistration(&_Registry.TransactOpts, orgName, serviceName)
}

// DeleteServiceRegistration is a paid mutator transaction binding the contract method 0xca97758c.
//
// Solidity: function deleteServiceRegistration(orgName bytes32, serviceName bytes32) returns()
func (_Registry *RegistryTransactorSession) DeleteServiceRegistration(orgName [32]byte, serviceName [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.DeleteServiceRegistration(&_Registry.TransactOpts, orgName, serviceName)
}

// DeleteTypeRepositoryRegistration is a paid mutator transaction binding the contract method 0x9aad8d9d.
//
// Solidity: function deleteTypeRepositoryRegistration(orgName bytes32, repositoryName bytes32) returns()
func (_Registry *RegistryTransactor) DeleteTypeRepositoryRegistration(opts *bind.TransactOpts, orgName [32]byte, repositoryName [32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "deleteTypeRepositoryRegistration", orgName, repositoryName)
}

// DeleteTypeRepositoryRegistration is a paid mutator transaction binding the contract method 0x9aad8d9d.
//
// Solidity: function deleteTypeRepositoryRegistration(orgName bytes32, repositoryName bytes32) returns()
func (_Registry *RegistrySession) DeleteTypeRepositoryRegistration(orgName [32]byte, repositoryName [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.DeleteTypeRepositoryRegistration(&_Registry.TransactOpts, orgName, repositoryName)
}

// DeleteTypeRepositoryRegistration is a paid mutator transaction binding the contract method 0x9aad8d9d.
//
// Solidity: function deleteTypeRepositoryRegistration(orgName bytes32, repositoryName bytes32) returns()
func (_Registry *RegistryTransactorSession) DeleteTypeRepositoryRegistration(orgName [32]byte, repositoryName [32]byte) (*types.Transaction, error) {
	return _Registry.Contract.DeleteTypeRepositoryRegistration(&_Registry.TransactOpts, orgName, repositoryName)
}

// RemoveOrganizationMembers is a paid mutator transaction binding the contract method 0xd2e544f7.
//
// Solidity: function removeOrganizationMembers(orgName bytes32, existingMembers address[]) returns()
func (_Registry *RegistryTransactor) RemoveOrganizationMembers(opts *bind.TransactOpts, orgName [32]byte, existingMembers []common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "removeOrganizationMembers", orgName, existingMembers)
}

// RemoveOrganizationMembers is a paid mutator transaction binding the contract method 0xd2e544f7.
//
// Solidity: function removeOrganizationMembers(orgName bytes32, existingMembers address[]) returns()
func (_Registry *RegistrySession) RemoveOrganizationMembers(orgName [32]byte, existingMembers []common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RemoveOrganizationMembers(&_Registry.TransactOpts, orgName, existingMembers)
}

// RemoveOrganizationMembers is a paid mutator transaction binding the contract method 0xd2e544f7.
//
// Solidity: function removeOrganizationMembers(orgName bytes32, existingMembers address[]) returns()
func (_Registry *RegistryTransactorSession) RemoveOrganizationMembers(orgName [32]byte, existingMembers []common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RemoveOrganizationMembers(&_Registry.TransactOpts, orgName, existingMembers)
}

// RemoveTagsFromServiceRegistration is a paid mutator transaction binding the contract method 0x013be2e0.
//
// Solidity: function removeTagsFromServiceRegistration(orgName bytes32, serviceName bytes32, tags bytes32[]) returns()
func (_Registry *RegistryTransactor) RemoveTagsFromServiceRegistration(opts *bind.TransactOpts, orgName [32]byte, serviceName [32]byte, tags [][32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "removeTagsFromServiceRegistration", orgName, serviceName, tags)
}

// RemoveTagsFromServiceRegistration is a paid mutator transaction binding the contract method 0x013be2e0.
//
// Solidity: function removeTagsFromServiceRegistration(orgName bytes32, serviceName bytes32, tags bytes32[]) returns()
func (_Registry *RegistrySession) RemoveTagsFromServiceRegistration(orgName [32]byte, serviceName [32]byte, tags [][32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RemoveTagsFromServiceRegistration(&_Registry.TransactOpts, orgName, serviceName, tags)
}

// RemoveTagsFromServiceRegistration is a paid mutator transaction binding the contract method 0x013be2e0.
//
// Solidity: function removeTagsFromServiceRegistration(orgName bytes32, serviceName bytes32, tags bytes32[]) returns()
func (_Registry *RegistryTransactorSession) RemoveTagsFromServiceRegistration(orgName [32]byte, serviceName [32]byte, tags [][32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RemoveTagsFromServiceRegistration(&_Registry.TransactOpts, orgName, serviceName, tags)
}

// RemoveTagsFromTypeRepositoryRegistration is a paid mutator transaction binding the contract method 0xca62968a.
//
// Solidity: function removeTagsFromTypeRepositoryRegistration(orgName bytes32, repositoryName bytes32, tags bytes32[]) returns()
func (_Registry *RegistryTransactor) RemoveTagsFromTypeRepositoryRegistration(opts *bind.TransactOpts, orgName [32]byte, repositoryName [32]byte, tags [][32]byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "removeTagsFromTypeRepositoryRegistration", orgName, repositoryName, tags)
}

// RemoveTagsFromTypeRepositoryRegistration is a paid mutator transaction binding the contract method 0xca62968a.
//
// Solidity: function removeTagsFromTypeRepositoryRegistration(orgName bytes32, repositoryName bytes32, tags bytes32[]) returns()
func (_Registry *RegistrySession) RemoveTagsFromTypeRepositoryRegistration(orgName [32]byte, repositoryName [32]byte, tags [][32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RemoveTagsFromTypeRepositoryRegistration(&_Registry.TransactOpts, orgName, repositoryName, tags)
}

// RemoveTagsFromTypeRepositoryRegistration is a paid mutator transaction binding the contract method 0xca62968a.
//
// Solidity: function removeTagsFromTypeRepositoryRegistration(orgName bytes32, repositoryName bytes32, tags bytes32[]) returns()
func (_Registry *RegistryTransactorSession) RemoveTagsFromTypeRepositoryRegistration(orgName [32]byte, repositoryName [32]byte, tags [][32]byte) (*types.Transaction, error) {
	return _Registry.Contract.RemoveTagsFromTypeRepositoryRegistration(&_Registry.TransactOpts, orgName, repositoryName, tags)
}

// UpdateServiceRegistration is a paid mutator transaction binding the contract method 0xbcb43444.
//
// Solidity: function updateServiceRegistration(orgName bytes32, serviceName bytes32, metadataURI bytes) returns()
func (_Registry *RegistryTransactor) UpdateServiceRegistration(opts *bind.TransactOpts, orgName [32]byte, serviceName [32]byte, metadataURI []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "updateServiceRegistration", orgName, serviceName, metadataURI)
}

// UpdateServiceRegistration is a paid mutator transaction binding the contract method 0xbcb43444.
//
// Solidity: function updateServiceRegistration(orgName bytes32, serviceName bytes32, metadataURI bytes) returns()
func (_Registry *RegistrySession) UpdateServiceRegistration(orgName [32]byte, serviceName [32]byte, metadataURI []byte) (*types.Transaction, error) {
	return _Registry.Contract.UpdateServiceRegistration(&_Registry.TransactOpts, orgName, serviceName, metadataURI)
}

// UpdateServiceRegistration is a paid mutator transaction binding the contract method 0xbcb43444.
//
// Solidity: function updateServiceRegistration(orgName bytes32, serviceName bytes32, metadataURI bytes) returns()
func (_Registry *RegistryTransactorSession) UpdateServiceRegistration(orgName [32]byte, serviceName [32]byte, metadataURI []byte) (*types.Transaction, error) {
	return _Registry.Contract.UpdateServiceRegistration(&_Registry.TransactOpts, orgName, serviceName, metadataURI)
}

// UpdateTypeRepositoryRegistration is a paid mutator transaction binding the contract method 0x080b6ad7.
//
// Solidity: function updateTypeRepositoryRegistration(orgName bytes32, repositoryName bytes32, repositoryURI bytes) returns()
func (_Registry *RegistryTransactor) UpdateTypeRepositoryRegistration(opts *bind.TransactOpts, orgName [32]byte, repositoryName [32]byte, repositoryURI []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "updateTypeRepositoryRegistration", orgName, repositoryName, repositoryURI)
}

// UpdateTypeRepositoryRegistration is a paid mutator transaction binding the contract method 0x080b6ad7.
//
// Solidity: function updateTypeRepositoryRegistration(orgName bytes32, repositoryName bytes32, repositoryURI bytes) returns()
func (_Registry *RegistrySession) UpdateTypeRepositoryRegistration(orgName [32]byte, repositoryName [32]byte, repositoryURI []byte) (*types.Transaction, error) {
	return _Registry.Contract.UpdateTypeRepositoryRegistration(&_Registry.TransactOpts, orgName, repositoryName, repositoryURI)
}

// UpdateTypeRepositoryRegistration is a paid mutator transaction binding the contract method 0x080b6ad7.
//
// Solidity: function updateTypeRepositoryRegistration(orgName bytes32, repositoryName bytes32, repositoryURI bytes) returns()
func (_Registry *RegistryTransactorSession) UpdateTypeRepositoryRegistration(orgName [32]byte, repositoryName [32]byte, repositoryURI []byte) (*types.Transaction, error) {
	return _Registry.Contract.UpdateTypeRepositoryRegistration(&_Registry.TransactOpts, orgName, repositoryName, repositoryURI)
}

// RegistryOrganizationCreatedIterator is returned from FilterOrganizationCreated and is used to iterate over the raw logs and unpacked data for OrganizationCreated events raised by the Registry contract.
type RegistryOrganizationCreatedIterator struct {
	Event *RegistryOrganizationCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryOrganizationCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryOrganizationCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryOrganizationCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryOrganizationCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryOrganizationCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryOrganizationCreated represents a OrganizationCreated event raised by the Registry contract.
type RegistryOrganizationCreated struct {
	OrgName [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrganizationCreated is a free log retrieval operation binding the contract event 0x0e7857bfbd020070a2c8d2fe38c788de1e6adc88cb46f60cf6ec7cd385e81db1.
//
// Solidity: e OrganizationCreated(orgName indexed bytes32)
func (_Registry *RegistryFilterer) FilterOrganizationCreated(opts *bind.FilterOpts, orgName [][32]byte) (*RegistryOrganizationCreatedIterator, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "OrganizationCreated", orgNameRule)
	if err != nil {
		return nil, err
	}
	return &RegistryOrganizationCreatedIterator{contract: _Registry.contract, event: "OrganizationCreated", logs: logs, sub: sub}, nil
}

// WatchOrganizationCreated is a free log subscription operation binding the contract event 0x0e7857bfbd020070a2c8d2fe38c788de1e6adc88cb46f60cf6ec7cd385e81db1.
//
// Solidity: e OrganizationCreated(orgName indexed bytes32)
func (_Registry *RegistryFilterer) WatchOrganizationCreated(opts *bind.WatchOpts, sink chan<- *RegistryOrganizationCreated, orgName [][32]byte) (event.Subscription, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "OrganizationCreated", orgNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryOrganizationCreated)
				if err := _Registry.contract.UnpackLog(event, "OrganizationCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryOrganizationDeletedIterator is returned from FilterOrganizationDeleted and is used to iterate over the raw logs and unpacked data for OrganizationDeleted events raised by the Registry contract.
type RegistryOrganizationDeletedIterator struct {
	Event *RegistryOrganizationDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryOrganizationDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryOrganizationDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryOrganizationDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryOrganizationDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryOrganizationDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryOrganizationDeleted represents a OrganizationDeleted event raised by the Registry contract.
type RegistryOrganizationDeleted struct {
	OrgName [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrganizationDeleted is a free log retrieval operation binding the contract event 0xb1dbc279d80967cb8113073651e5919753c82fad7b002581eb7a020eaf89e9a7.
//
// Solidity: e OrganizationDeleted(orgName indexed bytes32)
func (_Registry *RegistryFilterer) FilterOrganizationDeleted(opts *bind.FilterOpts, orgName [][32]byte) (*RegistryOrganizationDeletedIterator, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "OrganizationDeleted", orgNameRule)
	if err != nil {
		return nil, err
	}
	return &RegistryOrganizationDeletedIterator{contract: _Registry.contract, event: "OrganizationDeleted", logs: logs, sub: sub}, nil
}

// WatchOrganizationDeleted is a free log subscription operation binding the contract event 0xb1dbc279d80967cb8113073651e5919753c82fad7b002581eb7a020eaf89e9a7.
//
// Solidity: e OrganizationDeleted(orgName indexed bytes32)
func (_Registry *RegistryFilterer) WatchOrganizationDeleted(opts *bind.WatchOpts, sink chan<- *RegistryOrganizationDeleted, orgName [][32]byte) (event.Subscription, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "OrganizationDeleted", orgNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryOrganizationDeleted)
				if err := _Registry.contract.UnpackLog(event, "OrganizationDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryOrganizationModifiedIterator is returned from FilterOrganizationModified and is used to iterate over the raw logs and unpacked data for OrganizationModified events raised by the Registry contract.
type RegistryOrganizationModifiedIterator struct {
	Event *RegistryOrganizationModified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryOrganizationModifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryOrganizationModified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryOrganizationModified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryOrganizationModifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryOrganizationModifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryOrganizationModified represents a OrganizationModified event raised by the Registry contract.
type RegistryOrganizationModified struct {
	OrgName [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrganizationModified is a free log retrieval operation binding the contract event 0x06ccb920be65231f5c9d04dd4883d3c7648ebe5f5317cc7177ee4f4a7cc2d038.
//
// Solidity: e OrganizationModified(orgName indexed bytes32)
func (_Registry *RegistryFilterer) FilterOrganizationModified(opts *bind.FilterOpts, orgName [][32]byte) (*RegistryOrganizationModifiedIterator, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "OrganizationModified", orgNameRule)
	if err != nil {
		return nil, err
	}
	return &RegistryOrganizationModifiedIterator{contract: _Registry.contract, event: "OrganizationModified", logs: logs, sub: sub}, nil
}

// WatchOrganizationModified is a free log subscription operation binding the contract event 0x06ccb920be65231f5c9d04dd4883d3c7648ebe5f5317cc7177ee4f4a7cc2d038.
//
// Solidity: e OrganizationModified(orgName indexed bytes32)
func (_Registry *RegistryFilterer) WatchOrganizationModified(opts *bind.WatchOpts, sink chan<- *RegistryOrganizationModified, orgName [][32]byte) (event.Subscription, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "OrganizationModified", orgNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryOrganizationModified)
				if err := _Registry.contract.UnpackLog(event, "OrganizationModified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryServiceCreatedIterator is returned from FilterServiceCreated and is used to iterate over the raw logs and unpacked data for ServiceCreated events raised by the Registry contract.
type RegistryServiceCreatedIterator struct {
	Event *RegistryServiceCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryServiceCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryServiceCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryServiceCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryServiceCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryServiceCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryServiceCreated represents a ServiceCreated event raised by the Registry contract.
type RegistryServiceCreated struct {
	OrgName     [32]byte
	ServiceName [32]byte
	MetadataURI []byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterServiceCreated is a free log retrieval operation binding the contract event 0x3229c7118d95880b1bb8abc6231f47f1a63d7b1e7e22fbd91a8ccffc9fa75df9.
//
// Solidity: e ServiceCreated(orgName indexed bytes32, serviceName indexed bytes32, metadataURI bytes)
func (_Registry *RegistryFilterer) FilterServiceCreated(opts *bind.FilterOpts, orgName [][32]byte, serviceName [][32]byte) (*RegistryServiceCreatedIterator, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}
	var serviceNameRule []interface{}
	for _, serviceNameItem := range serviceName {
		serviceNameRule = append(serviceNameRule, serviceNameItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "ServiceCreated", orgNameRule, serviceNameRule)
	if err != nil {
		return nil, err
	}
	return &RegistryServiceCreatedIterator{contract: _Registry.contract, event: "ServiceCreated", logs: logs, sub: sub}, nil
}

// WatchServiceCreated is a free log subscription operation binding the contract event 0x3229c7118d95880b1bb8abc6231f47f1a63d7b1e7e22fbd91a8ccffc9fa75df9.
//
// Solidity: e ServiceCreated(orgName indexed bytes32, serviceName indexed bytes32, metadataURI bytes)
func (_Registry *RegistryFilterer) WatchServiceCreated(opts *bind.WatchOpts, sink chan<- *RegistryServiceCreated, orgName [][32]byte, serviceName [][32]byte) (event.Subscription, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}
	var serviceNameRule []interface{}
	for _, serviceNameItem := range serviceName {
		serviceNameRule = append(serviceNameRule, serviceNameItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "ServiceCreated", orgNameRule, serviceNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryServiceCreated)
				if err := _Registry.contract.UnpackLog(event, "ServiceCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryServiceDeletedIterator is returned from FilterServiceDeleted and is used to iterate over the raw logs and unpacked data for ServiceDeleted events raised by the Registry contract.
type RegistryServiceDeletedIterator struct {
	Event *RegistryServiceDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryServiceDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryServiceDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryServiceDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryServiceDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryServiceDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryServiceDeleted represents a ServiceDeleted event raised by the Registry contract.
type RegistryServiceDeleted struct {
	OrgName     [32]byte
	ServiceName [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterServiceDeleted is a free log retrieval operation binding the contract event 0x3caed2ddcd24bae20b0075a02d974ba3a229dace98271af93ce8c8f3ebd9d272.
//
// Solidity: e ServiceDeleted(orgName indexed bytes32, serviceName indexed bytes32)
func (_Registry *RegistryFilterer) FilterServiceDeleted(opts *bind.FilterOpts, orgName [][32]byte, serviceName [][32]byte) (*RegistryServiceDeletedIterator, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}
	var serviceNameRule []interface{}
	for _, serviceNameItem := range serviceName {
		serviceNameRule = append(serviceNameRule, serviceNameItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "ServiceDeleted", orgNameRule, serviceNameRule)
	if err != nil {
		return nil, err
	}
	return &RegistryServiceDeletedIterator{contract: _Registry.contract, event: "ServiceDeleted", logs: logs, sub: sub}, nil
}

// WatchServiceDeleted is a free log subscription operation binding the contract event 0x3caed2ddcd24bae20b0075a02d974ba3a229dace98271af93ce8c8f3ebd9d272.
//
// Solidity: e ServiceDeleted(orgName indexed bytes32, serviceName indexed bytes32)
func (_Registry *RegistryFilterer) WatchServiceDeleted(opts *bind.WatchOpts, sink chan<- *RegistryServiceDeleted, orgName [][32]byte, serviceName [][32]byte) (event.Subscription, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}
	var serviceNameRule []interface{}
	for _, serviceNameItem := range serviceName {
		serviceNameRule = append(serviceNameRule, serviceNameItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "ServiceDeleted", orgNameRule, serviceNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryServiceDeleted)
				if err := _Registry.contract.UnpackLog(event, "ServiceDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryServiceMetadataModifiedIterator is returned from FilterServiceMetadataModified and is used to iterate over the raw logs and unpacked data for ServiceMetadataModified events raised by the Registry contract.
type RegistryServiceMetadataModifiedIterator struct {
	Event *RegistryServiceMetadataModified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryServiceMetadataModifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryServiceMetadataModified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryServiceMetadataModified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryServiceMetadataModifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryServiceMetadataModifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryServiceMetadataModified represents a ServiceMetadataModified event raised by the Registry contract.
type RegistryServiceMetadataModified struct {
	OrgName     [32]byte
	ServiceName [32]byte
	MetadataURI []byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterServiceMetadataModified is a free log retrieval operation binding the contract event 0xb7b13a2b2a9c0147b27815cbec2c7e5ed10588c9d5812211619614c379174c5a.
//
// Solidity: e ServiceMetadataModified(orgName indexed bytes32, serviceName indexed bytes32, metadataURI bytes)
func (_Registry *RegistryFilterer) FilterServiceMetadataModified(opts *bind.FilterOpts, orgName [][32]byte, serviceName [][32]byte) (*RegistryServiceMetadataModifiedIterator, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}
	var serviceNameRule []interface{}
	for _, serviceNameItem := range serviceName {
		serviceNameRule = append(serviceNameRule, serviceNameItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "ServiceMetadataModified", orgNameRule, serviceNameRule)
	if err != nil {
		return nil, err
	}
	return &RegistryServiceMetadataModifiedIterator{contract: _Registry.contract, event: "ServiceMetadataModified", logs: logs, sub: sub}, nil
}

// WatchServiceMetadataModified is a free log subscription operation binding the contract event 0xb7b13a2b2a9c0147b27815cbec2c7e5ed10588c9d5812211619614c379174c5a.
//
// Solidity: e ServiceMetadataModified(orgName indexed bytes32, serviceName indexed bytes32, metadataURI bytes)
func (_Registry *RegistryFilterer) WatchServiceMetadataModified(opts *bind.WatchOpts, sink chan<- *RegistryServiceMetadataModified, orgName [][32]byte, serviceName [][32]byte) (event.Subscription, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}
	var serviceNameRule []interface{}
	for _, serviceNameItem := range serviceName {
		serviceNameRule = append(serviceNameRule, serviceNameItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "ServiceMetadataModified", orgNameRule, serviceNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryServiceMetadataModified)
				if err := _Registry.contract.UnpackLog(event, "ServiceMetadataModified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryServiceTagsModifiedIterator is returned from FilterServiceTagsModified and is used to iterate over the raw logs and unpacked data for ServiceTagsModified events raised by the Registry contract.
type RegistryServiceTagsModifiedIterator struct {
	Event *RegistryServiceTagsModified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryServiceTagsModifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryServiceTagsModified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryServiceTagsModified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryServiceTagsModifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryServiceTagsModifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryServiceTagsModified represents a ServiceTagsModified event raised by the Registry contract.
type RegistryServiceTagsModified struct {
	OrgName     [32]byte
	ServiceName [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterServiceTagsModified is a free log retrieval operation binding the contract event 0xd8b715d9bf49bca034a993b5b934475414e84c904dcbf90dbddd139808b97b05.
//
// Solidity: e ServiceTagsModified(orgName indexed bytes32, serviceName indexed bytes32)
func (_Registry *RegistryFilterer) FilterServiceTagsModified(opts *bind.FilterOpts, orgName [][32]byte, serviceName [][32]byte) (*RegistryServiceTagsModifiedIterator, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}
	var serviceNameRule []interface{}
	for _, serviceNameItem := range serviceName {
		serviceNameRule = append(serviceNameRule, serviceNameItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "ServiceTagsModified", orgNameRule, serviceNameRule)
	if err != nil {
		return nil, err
	}
	return &RegistryServiceTagsModifiedIterator{contract: _Registry.contract, event: "ServiceTagsModified", logs: logs, sub: sub}, nil
}

// WatchServiceTagsModified is a free log subscription operation binding the contract event 0xd8b715d9bf49bca034a993b5b934475414e84c904dcbf90dbddd139808b97b05.
//
// Solidity: e ServiceTagsModified(orgName indexed bytes32, serviceName indexed bytes32)
func (_Registry *RegistryFilterer) WatchServiceTagsModified(opts *bind.WatchOpts, sink chan<- *RegistryServiceTagsModified, orgName [][32]byte, serviceName [][32]byte) (event.Subscription, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}
	var serviceNameRule []interface{}
	for _, serviceNameItem := range serviceName {
		serviceNameRule = append(serviceNameRule, serviceNameItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "ServiceTagsModified", orgNameRule, serviceNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryServiceTagsModified)
				if err := _Registry.contract.UnpackLog(event, "ServiceTagsModified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryTypeRepositoryCreatedIterator is returned from FilterTypeRepositoryCreated and is used to iterate over the raw logs and unpacked data for TypeRepositoryCreated events raised by the Registry contract.
type RegistryTypeRepositoryCreatedIterator struct {
	Event *RegistryTypeRepositoryCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTypeRepositoryCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTypeRepositoryCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTypeRepositoryCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTypeRepositoryCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTypeRepositoryCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTypeRepositoryCreated represents a TypeRepositoryCreated event raised by the Registry contract.
type RegistryTypeRepositoryCreated struct {
	OrgName            [32]byte
	TypeRepositoryName [32]byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterTypeRepositoryCreated is a free log retrieval operation binding the contract event 0x5124da9b6fa39b72e36fd353b25ddc71861b18c5dcafea15e97a850a1696adbc.
//
// Solidity: e TypeRepositoryCreated(orgName indexed bytes32, typeRepositoryName indexed bytes32)
func (_Registry *RegistryFilterer) FilterTypeRepositoryCreated(opts *bind.FilterOpts, orgName [][32]byte, typeRepositoryName [][32]byte) (*RegistryTypeRepositoryCreatedIterator, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}
	var typeRepositoryNameRule []interface{}
	for _, typeRepositoryNameItem := range typeRepositoryName {
		typeRepositoryNameRule = append(typeRepositoryNameRule, typeRepositoryNameItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "TypeRepositoryCreated", orgNameRule, typeRepositoryNameRule)
	if err != nil {
		return nil, err
	}
	return &RegistryTypeRepositoryCreatedIterator{contract: _Registry.contract, event: "TypeRepositoryCreated", logs: logs, sub: sub}, nil
}

// WatchTypeRepositoryCreated is a free log subscription operation binding the contract event 0x5124da9b6fa39b72e36fd353b25ddc71861b18c5dcafea15e97a850a1696adbc.
//
// Solidity: e TypeRepositoryCreated(orgName indexed bytes32, typeRepositoryName indexed bytes32)
func (_Registry *RegistryFilterer) WatchTypeRepositoryCreated(opts *bind.WatchOpts, sink chan<- *RegistryTypeRepositoryCreated, orgName [][32]byte, typeRepositoryName [][32]byte) (event.Subscription, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}
	var typeRepositoryNameRule []interface{}
	for _, typeRepositoryNameItem := range typeRepositoryName {
		typeRepositoryNameRule = append(typeRepositoryNameRule, typeRepositoryNameItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "TypeRepositoryCreated", orgNameRule, typeRepositoryNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTypeRepositoryCreated)
				if err := _Registry.contract.UnpackLog(event, "TypeRepositoryCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryTypeRepositoryDeletedIterator is returned from FilterTypeRepositoryDeleted and is used to iterate over the raw logs and unpacked data for TypeRepositoryDeleted events raised by the Registry contract.
type RegistryTypeRepositoryDeletedIterator struct {
	Event *RegistryTypeRepositoryDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTypeRepositoryDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTypeRepositoryDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTypeRepositoryDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTypeRepositoryDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTypeRepositoryDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTypeRepositoryDeleted represents a TypeRepositoryDeleted event raised by the Registry contract.
type RegistryTypeRepositoryDeleted struct {
	OrgName            [32]byte
	TypeRepositoryName [32]byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterTypeRepositoryDeleted is a free log retrieval operation binding the contract event 0x6ede3bb1e53daa5c72ee70092a3ce9a7dadac03f980fe8726ad2716c7f871d54.
//
// Solidity: e TypeRepositoryDeleted(orgName indexed bytes32, typeRepositoryName indexed bytes32)
func (_Registry *RegistryFilterer) FilterTypeRepositoryDeleted(opts *bind.FilterOpts, orgName [][32]byte, typeRepositoryName [][32]byte) (*RegistryTypeRepositoryDeletedIterator, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}
	var typeRepositoryNameRule []interface{}
	for _, typeRepositoryNameItem := range typeRepositoryName {
		typeRepositoryNameRule = append(typeRepositoryNameRule, typeRepositoryNameItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "TypeRepositoryDeleted", orgNameRule, typeRepositoryNameRule)
	if err != nil {
		return nil, err
	}
	return &RegistryTypeRepositoryDeletedIterator{contract: _Registry.contract, event: "TypeRepositoryDeleted", logs: logs, sub: sub}, nil
}

// WatchTypeRepositoryDeleted is a free log subscription operation binding the contract event 0x6ede3bb1e53daa5c72ee70092a3ce9a7dadac03f980fe8726ad2716c7f871d54.
//
// Solidity: e TypeRepositoryDeleted(orgName indexed bytes32, typeRepositoryName indexed bytes32)
func (_Registry *RegistryFilterer) WatchTypeRepositoryDeleted(opts *bind.WatchOpts, sink chan<- *RegistryTypeRepositoryDeleted, orgName [][32]byte, typeRepositoryName [][32]byte) (event.Subscription, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}
	var typeRepositoryNameRule []interface{}
	for _, typeRepositoryNameItem := range typeRepositoryName {
		typeRepositoryNameRule = append(typeRepositoryNameRule, typeRepositoryNameItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "TypeRepositoryDeleted", orgNameRule, typeRepositoryNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTypeRepositoryDeleted)
				if err := _Registry.contract.UnpackLog(event, "TypeRepositoryDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryTypeRepositoryModifiedIterator is returned from FilterTypeRepositoryModified and is used to iterate over the raw logs and unpacked data for TypeRepositoryModified events raised by the Registry contract.
type RegistryTypeRepositoryModifiedIterator struct {
	Event *RegistryTypeRepositoryModified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTypeRepositoryModifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTypeRepositoryModified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTypeRepositoryModified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTypeRepositoryModifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTypeRepositoryModifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTypeRepositoryModified represents a TypeRepositoryModified event raised by the Registry contract.
type RegistryTypeRepositoryModified struct {
	OrgName            [32]byte
	TypeRepositoryName [32]byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterTypeRepositoryModified is a free log retrieval operation binding the contract event 0xea3bcbabd0c9d3dae0474b21e6aeef5b2598eafe710788a0da66a15ffb65f449.
//
// Solidity: e TypeRepositoryModified(orgName indexed bytes32, typeRepositoryName indexed bytes32)
func (_Registry *RegistryFilterer) FilterTypeRepositoryModified(opts *bind.FilterOpts, orgName [][32]byte, typeRepositoryName [][32]byte) (*RegistryTypeRepositoryModifiedIterator, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}
	var typeRepositoryNameRule []interface{}
	for _, typeRepositoryNameItem := range typeRepositoryName {
		typeRepositoryNameRule = append(typeRepositoryNameRule, typeRepositoryNameItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "TypeRepositoryModified", orgNameRule, typeRepositoryNameRule)
	if err != nil {
		return nil, err
	}
	return &RegistryTypeRepositoryModifiedIterator{contract: _Registry.contract, event: "TypeRepositoryModified", logs: logs, sub: sub}, nil
}

// WatchTypeRepositoryModified is a free log subscription operation binding the contract event 0xea3bcbabd0c9d3dae0474b21e6aeef5b2598eafe710788a0da66a15ffb65f449.
//
// Solidity: e TypeRepositoryModified(orgName indexed bytes32, typeRepositoryName indexed bytes32)
func (_Registry *RegistryFilterer) WatchTypeRepositoryModified(opts *bind.WatchOpts, sink chan<- *RegistryTypeRepositoryModified, orgName [][32]byte, typeRepositoryName [][32]byte) (event.Subscription, error) {

	var orgNameRule []interface{}
	for _, orgNameItem := range orgName {
		orgNameRule = append(orgNameRule, orgNameItem)
	}
	var typeRepositoryNameRule []interface{}
	for _, typeRepositoryNameItem := range typeRepositoryName {
		typeRepositoryNameRule = append(typeRepositoryNameRule, typeRepositoryNameItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "TypeRepositoryModified", orgNameRule, typeRepositoryNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTypeRepositoryModified)
				if err := _Registry.contract.UnpackLog(event, "TypeRepositoryModified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
