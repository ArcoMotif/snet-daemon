syntax = "proto3";

package config;

//Defines the kind of request type
enum RequestType {
    //Used when you just need to read the current configuration
    CONFIG_READ = 0;
    //Used when you want to update the configuration existing configuration
    CONFIG_WRITE = 1;
    //This is used to instruct the Daemon to stop taking in any new requests,At this point , however any existing requests being processed will be honored.
    STOP_PROCESSING_REQUEST = 2;
    //Restores the normal behavior to start processing new requests again
    START_PROCESSING_REQUEST = 3;
}

//To indicate if the request was processed successfully or with some error.rg
enum ResponseType {
    FAILED = 0;
    SUCCESS = 1;
}

//Standardize the request expected by Daemon
message ConfigurationRequest {
    //Mandatory fields , tells what kind of request type is this for ( example , if the request is to read the config or to update the config etc;
    RequestType request_type = 1;

    //Signature will compromise of the below
    // ("_Request", "block_number","json_data",address)
    bytes signature = 2;


    //Holds the updated configuration in the form of JSON, this is honored by the Daemon ONLY when you the RequestType is set to CONFIG_WRITE
    string json_data = 3;
}

//Standardize the response sent back by Daemon
message ConfigurationDetailsResponse {
    //Mandatory field (Indicates if the request was successful or not)
    ResponseType response_type = 1;

    //Holds the current configuration of Daemon and is sent back as a response.
    //This will be assigned a value when the Request type was CONFIG_READ
    string json_data = 2;


    //Only in case of any error this field will be populated.
    string error_message =3;
}

//Used to manage all configurations in Daemon
service ConfigurationService {
    rpc ManageConfiguration(ConfigurationRequest) returns (ConfigurationDetailsResponse) {}

}